version: "3.8"

services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
      - redis-vote-result-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
      - postgres-worker-result-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      timeout: 5s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
      restart_policy:
        condition: on-failure

  vote:
    image: tomcod/3dokr-vote:latest
    ports:
      - "8080:8080"
    depends_on:
      - redis
    networks:
      - app-network
      - redis-vote-result-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1"
          memory: 1G
      restart_policy:
        condition: on-failure

  worker:
    image: tomcod/3dokr-worker:latest
    depends_on:
      - redis
      - postgres
    networks:
      - app-network
      - postgres-worker-result-network
    healthcheck:
      test: ["CMD", "true"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1"
          memory: 1G
      restart_policy:
        condition: on-failure

  result:
    image: tomcod/3dokr-result:latest
    ports:
      - "8081:8888"
    depends_on:
      - redis
      - postgres
      - worker
    networks:
      - app-network
      - redis-vote-result-network
      - postgres-worker-result-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:8888 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1"
          memory: 1G
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    deploy:
      mode: global
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"'
    networks:
      - monitoring


volumes:
  redis-data:
    name: redis-data-volume
  postgres-data:
    name: postgres-data-volume
  grafana-data:

networks:
  app-network:
    driver: overlay
  redis-vote-result-network:
    driver: overlay
  postgres-worker-result-network:
    driver: overlay
  monitoring:
    external: false
    driver: overlay
